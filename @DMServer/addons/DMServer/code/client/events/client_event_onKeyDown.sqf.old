params ["_ctrl", "_code", "_shift", "_ctrlKey", "_alt"];
private _handled = false;
private _cursorTarget = cursorObject;
// Не даем открыть чат
if (_code in (
	actionKeys "NextChannel" +
	actionKeys "PrevChannel" +
	actionKeys "chat"
)) exitWith {true};
// Не даем открыть commandingMenu
if (_code in (
	actionKeys "TacticalView" + 
	actionKeys "SelectAll" + 
	actionKeys "forceCommandingMode" + 
	[11,14,62,63,64,65,66,67,68,36]
)) exitWith {true};

switch (_code) do {
	// Основное оружие
	case 2: {
		if ((primaryWeapon player) != "") then {
			player selectWeapon primaryWeapon player;
		};
		_handled = true
	};
	// Гранатомет
	case 3: {
		if ((secondaryWeapon player) != "") then {
			player selectWeapon secondaryWeapon player;
		};
		_handled = true
	};
	// Пистолет
	case 4: {
		if ((handgunWeapon player) != "") then {
			player selectWeapon handgunWeapon player;
		};
		_handled = true
	};
	// +/- Бинды на дистанцию прорисовки
	case 12 : {
		if (time < DM_timeout) exitWith {};
		DM_timeout = time + 0.5;
		if (DM_viewDistance <= 200) exitWith {};
		DM_viewDistance = round(DM_viewDistance - 100);
		profileNamespace setVariable ["DM_viewDistance", DM_viewDistance];
		setViewDistance DM_viewDistance;
		setObjectViewDistance DM_viewDistance - 100;
		[format["Дистанция прорисовки %1м.", DM_viewDistance], "info"] call client_gui_hint;
		_handled = true
	};
	case 13 : {
		if (time < DM_timeout) exitWith {};
		DM_timeout = time + 0.5;
		if (DM_viewDistance >= 12000) exitWith {};
		DM_viewDistance = round(DM_viewDistance + 100);
		profileNamespace setVariable ["DM_viewDistance", DM_viewDistance];
		setViewDistance DM_viewDistance;
		setObjectViewDistance DM_viewDistance - 100;
		[format["Дистанция прорисовки %1м.", DM_viewDistance], "info"] call client_gui_hint;
		_handled = true
	};
	case 15 : {
		if (_alt OR _shift OR _ctrlKey) exitWith {};
		private _group = uiNamespace getVariable ["DM_ScoreGroup", controlNull];
		_group ctrlSetFade 0;
		_group ctrlCommit 0.25;
	};
	// Убрать оружие (Shift + H)
	case 35 : {
		if (_shift AND (currentWeapon player) != "") then {
			player action["SwitchWeapon", player, player, 100];
		} else {
			[] spawn client_utils_healMe
		};
		_handled = true
	};
	// Прыжок (Пробел)
	case 57 : {
		if (isNil "jumpActionTime") then {jumpActionTime = 0};
		if (_shift AND {isTouchingGround player} AND {(stance player) == "STAND"} AND {(speed player) > 2} AND {(time - jumpActionTime) > 1} AND {(getFatigue player) < 0.75}) then {
			jumpActionTime = time;
			[player] remoteExec ["client_actions_jump", -2];
			player setFatigue (getFatigue player + 0.2);
			_handled = true
		};
	};
	// Меню выбора снаряжения (F1)
	case 59 : {
		[] spawn client_loadout_choose;
		_handled = true
	};
	// Меню выбора спавна (F2)
	case 60 : {
		[] spawn client_spawn_chooseCity;
		_handled = true
	};
	// Меню выбора боевой техники (F3)
	case 61 : {
		[] spawn client_vehicle_warChoose;
		_handled = true
	};
	// Приглушить звук (Shift + End) 
	case 207 : {
		if (_shift) then {
			switch (soundVolume) do {
				case 1: {["Громкость 10%", "info"] call client_gui_hint; 1 fadeSound 0.1};
				case 0.1: {["Громкость 100%", "info"] call client_gui_hint; 1 fadeSound 1};
			};
			_handled = true
		};
	};
};

_handled;